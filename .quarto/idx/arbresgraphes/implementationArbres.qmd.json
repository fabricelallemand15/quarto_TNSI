{"title":"Implémentation des arbres en Python","markdown":{"yaml":{"title":"Implémentation des arbres en Python","subtitle":"S4 - Arbres et graphes","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"format":{"html":"default","pdf":{"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"biblio-title":"Sources utilisées","reference-location":"document","keep-tex":true}},"format-links":["pdf","tex"]},"headingText":"1. Arbres binaires","containsRefs":false,"markdown":"\n\nL'objectif de cette partie est d'**implémenter** la structure d'arbre binaire en Python. Nous allons pour cela utiliser la Programmation Orientée Objet et construire un module réutilisable proposant à l'utilisateur une interface (**API**) permettant de travailler avec les arbres binaires.\n\n\nUne interface souhaitable devrait permettre de :\n\n-   Créer un arbre vide ;\n-   Accéder au sous-arbre gauche et au sous-arbre droit d'un nœud ;\n-   Accéder à une clef ;\n-   Tester si un nœud est une feuille ;\n-   Tester si un arbre est vide ;\n-   Retourner la taille ;\n-   Retourner la hauteur.\n\nDe plus, il serait souhaitable de parvenir à afficher un arbre de façon visuelle.\n\nNous avons vu que la structure d'arbre binaire est une structure **récursive** : cette propriété est exploitée dans l'implémentation que nous allons présenter. Pour définir un arbre, il suffit de définir un nœud racine ainsi que les deux sous-arbres gauche et droite qui sont eux-même des arbres binaires. Cela revient à assimiler un arbre à sa racine associée à un lien vers ses deux fils.\n\nNous définissons ci-dessous un objet `ArbreBinaire` possédant trois attributs `clef`, `gauche`, `droit`. Pour respecter les principes de la POO, et notamment la notion d'**encapsulation**, nous avons défini des méthodes d'accès aux attributs (elles commencent par `get`) et des méthodes de modification des attributs (elles commencent par `set`) et on s'interdira tout accès ou affectation direct(e) du type `arbre.racine = ...`.\n\nLa méthode `setRacine`, qui permet de définir la clef d'un nœud assure que chaque nœud a toujours un sous-arbre gauche **et** un sous-arbre droit, éventuellement vides, ce qui facilite le traitement des arbres dans les algorithmes suivants. On matérialise ici l'aspect récursif de la structure.\n\n``` python\nclass ArbreBinaire:\n    \"\"\" Implémentation de la structure d'arbre binaire \"\"\"\n\n    def __init__(self):\n        self.racine = None\n        # les sous-arbres gauche et droit doivent être des \n        # instances de l'objet ArbreBinaire\n        self.gauche = None\n        self.droit = None\n\n    def setRacine(self, racine):\n        \"\"\"définit la clef de la racine de l'instance\n         et crée les sous arbres vides gauches et droits\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ArbreBinaire()\n        if self.droit is None:\n            self.droit = ArbreBinaire()\n    \n    def getRacine(self):\n        \"\"\"retourne la clef de la racine de l'arbre\"\"\"\n        return self.racine\n\n    def getSousArbreGauche(self):\n        return self.gauche\n\n    def setSousArbreGauche(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.gauche = arbre\n\n    def getSousArbreDroit(self):\n        return self.droit\n\n    def setSousArbreDroit(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.droit = arbre\n\n    def estVide(self) -> bool:\n        return self.racine is None\n\n    def estFeuille(self) -> bool:\n        if self.estVide():\n            return False\n        else:\n            return self.gauche.estVide() and self.droit.estVide()\n\n    def __str__(self):\n        if self.estVide():\n            return \"()\"\n        elif self.estFeuille():\n            return f\"('{self.racine}', (), ())\"\n        else:\n            return f\"('{self.racine}', {self.gauche.__str__()}, {self.droit.__str__()})\"\n```\n\nLa classe est complétée par une méthode `estVide` permettant de tester si un arbre est vide ou non et une méthode `estFeuille` permettant de tester si un nœud est une feuille ou non (on confond un nœud avec un arbre de hauteur 1).\n\nLa dernière méthode est la méthode spéciale `__str__` qui définit la façon dont un arbre va être affiché par la fonction `print`. Ici, on a choisi un affichage sous forme de tuple du type `(clef, sous-arbre gauche, sous-arbre droit)`.\n\nPour créer un module, on enregistre le code ci-dessus dans un fichier nommé par exemple `structures.py`.\n\nOn peut ensuite utiliser notre nouvelle structure dans un autre fichier Python (dans le même dossier), ou dans la console interactive, en important le module :\n\n``` python\nfrom structures import *\n\na = ArbreBinaire()\na.setRacine(8)\na.getSousArbreGauche().setRacine(3)\na.getSousArbreDroit().setRacine(9)\nb = a.getSousArbreGauche()\nc = a.getSousArbreDroit()\nb.getSousArbreGauche().setRacine(7)\nb.getSousArbreDroit().setRacine(5)\nc.getSousArbreDroit().setRacine(1)\nprint(a)\n```\n\nOn obtient en sortie :\n\n``` python\n>>> (8, (3, (7, (), ()), (5, (), ())), (9, (), (1, (), ())))\n```\n\nCela correspond à l'arbre représenté ci-dessous :\n\n![](arbre_bin3.png){width=\"30%\" fig-align=\"center\"}\n\nOn peut tester les autres méthodes dans la console :\n\n``` python\nprint(c)\n>>> (9, (), (1, (), ()))\nc.getSousArbreGauche().estVide()\n>>> True\nc.estFeuille()\n>>> False\nc.getSousArbreDroit().estFeuille()\n>>> True\n```\n\nNous pouvons maintenant ajouter au fichier `structures.py` les deux fonctions suivantes (en dehors de la classe `ArbreBinaire` car ce ne sont pas des méthodes) qui retournent respectivement la taille et la hauteur d'un arbre binaire.\n\n``` python\ndef taille(arbre) -> int:\n    \"\"\"Retourne la taille de l'arbre, càd son nombre de noeuds\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + taille(arbre.gauche) + taille(arbre.droit)\n\ndef hauteur(arbre) -> int:\n    \"\"\"Retourne la hauteur de l'arbre\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + max(hauteur(arbre.gauche), hauteur(arbre.droit))\n```\n\nPrendre le temps de bien comprendre comment fonctionnent ces deux fonctions ...\n\n``` python\ntaille(a)\n>>> 6\nhauteur(a)\n>>> 3\n```\n\nCe module `structures` sera utilisé en exercices et plus tard dans l'année lorsque nous étudierons les algorithmes sur les arbres.\n\n## 2. Arbres binaires de recherche (ABR)\n\nLes ABR sont des arbres binaires. Nous pouvons donc créer une classe `ABR` fille de la classe `ArbreBinaire` en utilisant la notion d'**héritage** et de **polymorphisme** de la POO (voir les compléments de cours à ce sujet). Nous définissons une méthode spécifique : l'insertion d'une clef. Cette méthode ajoute une clef à un ABR existant en s'assurant que l'arbre obtenu est toujours un ABR (le nouveau nœud est toujours une feuille).\n\n``` python\nclass ABR(ArbreBinaire):\n    \"\"\" Implémentation de la structure d'arbre binaire de recherche \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n    def setRacine(self, racine):\n        \"\"\"définit la clef de la racine de l'instance\n         et crée les sous arbres vides gauches et droits\n         Provoque une erreur si la racine casse la structure d'ABR\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ABR()\n        if self.droit is None:\n            self.droit = ABR()\n        if not estABR(self):\n            raise Exception(\"Cette affectation de clef casse la structure ABR !!!\")\n\n    def insere(self, racine):\n        \"\"\"insère une clef dans l'arbre en préservant la structure ABR\"\"\"\n        if self.racine is None:\n            self.racine = racine\n            self.gauche = ABR()\n            self.droit = ABR()\n        else:\n            if racine < self.racine:\n                self.gauche.insere(racine)\n            else:\n                self.droit.insere(racine)\n```\n\nPour définir un arbre binaire de recherche valide, on utilisera toujours la méthode `insere` car elle permet de s'assurer de toujours conserver un ABR.\n\nPour faciliter la vérification, nous définissons une fonction `estABR` qui peut s'appliquer aussi bien à un arbre binaire quelconque qu'à un ABR et qui retourne `True` si l'arbre est un ABR et `False` sinon.\n\n``` python\ndef estABR(arbre, mini=-float(\"inf\"), maxi=+float(\"inf\")) -> bool:\n    if arbre.getRacine() is None:\n        return True\n    else:\n        return estABR(arbre.getSousArbreGauche(), mini, arbre.getRacine()) and \n               estABR(arbre.getSousArbreDroit(), arbre.getRacine(), maxi) and \n               mini < arbre.racine < maxi\n```\n\nPrendre le temps de bien comprendre cette fonction ...\n\nUtilisation :\n\n``` python\nfrom structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\nprint(a)\nprint(estABR(a))\n# Affectation directe à proscrire :\n# a.getSousArbreDroit().setRacine(1) ## provoque une erreur\n```\n\nSortie :\n\n``` python\n(8, (5, (3, (), ()), ()), (12, (10, (), ()), (15, (), ())))\nTrue\n```\n\nL'arbre correspond à :\n\n![](arbre.gv.png){width=\"30%\" fig-align=\"center\"}\n\nLe module `structure.py` est à conserver : il sera utilisé en exercices et dans les chapitres suivants.\n\n::: callout-note\n## Complément\n\nOn peut ajouter une fonctionnalité de représentation graphique d'un arbre en utilisant les bibliothèques `networkx` et `matplotlib`. Ajouter la fonction ci-dessous au fichier `structures.py` :\n\n``` python\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\ndef afficheArbre(arbre, size=(4,4), null_node=False):\n\"\"\"\nsize : tuple de 2 entiers. Si size est int -> (size, size)\nnull_node : si True, trace les liaisons vers les sous-arbres vides\n\"\"\"\narbreAsTuple = eval(arbre.__str__())\ndef parkour(arbre, noeuds, branches, labels, positions, profondeur, \n            pos_courante, pos_parent, null_node):\n    if arbre != ():\n        noeuds[0].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        profondeur -= 1\n        labels[pos_courante] = str(arbre[0])\n        branches[0].append((pos_courante, pos_parent))\n        pos_gauche = pos_courante - 2 ** profondeur\n        parkour(arbre[1], noeuds, branches, labels, positions, profondeur, \n                pos_gauche, pos_courante, null_node)\n        pos_droit = pos_courante + 2 ** profondeur\n        parkour(arbre[2], noeuds, branches, labels, positions, profondeur, \n                pos_droit, pos_courante, null_node)\n    elif null_node:\n        noeuds[1].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        branches[1].append((pos_courante, pos_parent))\n\nif arbreAsTuple == ():\n    return\n\nbranches = [[]]\nprofondeur = hauteur(arbre)\npos_courante = 2 ** profondeur\nnoeuds = [[pos_courante]]\npositions = {pos_courante: (pos_courante, profondeur)}\nlabels = {pos_courante: str(arbreAsTuple[0])}\n\nif null_node:\n    branches.append([])\n    noeuds.append([])\n\nprofondeur -= 1\nparkour(arbreAsTuple[1], noeuds, branches, labels, positions, profondeur, \n        pos_courante - 2 ** profondeur, pos_courante, null_node)\nparkour(arbreAsTuple[2], noeuds, branches, labels, positions, profondeur, \n        pos_courante + 2 ** profondeur, pos_courante, null_node)\n\nmon_arbre = nx.Graph()\n\nif type(size) == int:\n    size = (size, size)\nplt.figure(figsize=size)\n\nnx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[0], \n                       node_color=\"white\", node_size=550, edgecolors=\"blue\")\nnx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[0], \n                       edge_color=\"black\", width=2)\nnx.draw_networkx_labels(mon_arbre, positions, labels)\n\nif null_node:\n    nx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[1], \n                           node_color=\"white\", node_size=50, edgecolors=\"grey\")\n    nx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[1], \n                           edge_color=\"grey\", width=1)\n\nax = plt.gca()\nax.margins(0.1)\nplt.axis(\"off\")\nplt.show()\nplt.close()\n```\n\nUtilisation :\n\n``` python\nfrom structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\n\nafficheArbre(a)\n```\n\nSortie :\n\n![](arbre.gv.png){width=\"30%\" fig-align=\"center\"}\n:::","srcMarkdownNoYaml":"\n\nL'objectif de cette partie est d'**implémenter** la structure d'arbre binaire en Python. Nous allons pour cela utiliser la Programmation Orientée Objet et construire un module réutilisable proposant à l'utilisateur une interface (**API**) permettant de travailler avec les arbres binaires.\n\n## 1. Arbres binaires\n\nUne interface souhaitable devrait permettre de :\n\n-   Créer un arbre vide ;\n-   Accéder au sous-arbre gauche et au sous-arbre droit d'un nœud ;\n-   Accéder à une clef ;\n-   Tester si un nœud est une feuille ;\n-   Tester si un arbre est vide ;\n-   Retourner la taille ;\n-   Retourner la hauteur.\n\nDe plus, il serait souhaitable de parvenir à afficher un arbre de façon visuelle.\n\nNous avons vu que la structure d'arbre binaire est une structure **récursive** : cette propriété est exploitée dans l'implémentation que nous allons présenter. Pour définir un arbre, il suffit de définir un nœud racine ainsi que les deux sous-arbres gauche et droite qui sont eux-même des arbres binaires. Cela revient à assimiler un arbre à sa racine associée à un lien vers ses deux fils.\n\nNous définissons ci-dessous un objet `ArbreBinaire` possédant trois attributs `clef`, `gauche`, `droit`. Pour respecter les principes de la POO, et notamment la notion d'**encapsulation**, nous avons défini des méthodes d'accès aux attributs (elles commencent par `get`) et des méthodes de modification des attributs (elles commencent par `set`) et on s'interdira tout accès ou affectation direct(e) du type `arbre.racine = ...`.\n\nLa méthode `setRacine`, qui permet de définir la clef d'un nœud assure que chaque nœud a toujours un sous-arbre gauche **et** un sous-arbre droit, éventuellement vides, ce qui facilite le traitement des arbres dans les algorithmes suivants. On matérialise ici l'aspect récursif de la structure.\n\n``` python\nclass ArbreBinaire:\n    \"\"\" Implémentation de la structure d'arbre binaire \"\"\"\n\n    def __init__(self):\n        self.racine = None\n        # les sous-arbres gauche et droit doivent être des \n        # instances de l'objet ArbreBinaire\n        self.gauche = None\n        self.droit = None\n\n    def setRacine(self, racine):\n        \"\"\"définit la clef de la racine de l'instance\n         et crée les sous arbres vides gauches et droits\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ArbreBinaire()\n        if self.droit is None:\n            self.droit = ArbreBinaire()\n    \n    def getRacine(self):\n        \"\"\"retourne la clef de la racine de l'arbre\"\"\"\n        return self.racine\n\n    def getSousArbreGauche(self):\n        return self.gauche\n\n    def setSousArbreGauche(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.gauche = arbre\n\n    def getSousArbreDroit(self):\n        return self.droit\n\n    def setSousArbreDroit(self, arbre):\n        if isinstance(arbre, ArbreBinaire):\n            self.droit = arbre\n\n    def estVide(self) -> bool:\n        return self.racine is None\n\n    def estFeuille(self) -> bool:\n        if self.estVide():\n            return False\n        else:\n            return self.gauche.estVide() and self.droit.estVide()\n\n    def __str__(self):\n        if self.estVide():\n            return \"()\"\n        elif self.estFeuille():\n            return f\"('{self.racine}', (), ())\"\n        else:\n            return f\"('{self.racine}', {self.gauche.__str__()}, {self.droit.__str__()})\"\n```\n\nLa classe est complétée par une méthode `estVide` permettant de tester si un arbre est vide ou non et une méthode `estFeuille` permettant de tester si un nœud est une feuille ou non (on confond un nœud avec un arbre de hauteur 1).\n\nLa dernière méthode est la méthode spéciale `__str__` qui définit la façon dont un arbre va être affiché par la fonction `print`. Ici, on a choisi un affichage sous forme de tuple du type `(clef, sous-arbre gauche, sous-arbre droit)`.\n\nPour créer un module, on enregistre le code ci-dessus dans un fichier nommé par exemple `structures.py`.\n\nOn peut ensuite utiliser notre nouvelle structure dans un autre fichier Python (dans le même dossier), ou dans la console interactive, en important le module :\n\n``` python\nfrom structures import *\n\na = ArbreBinaire()\na.setRacine(8)\na.getSousArbreGauche().setRacine(3)\na.getSousArbreDroit().setRacine(9)\nb = a.getSousArbreGauche()\nc = a.getSousArbreDroit()\nb.getSousArbreGauche().setRacine(7)\nb.getSousArbreDroit().setRacine(5)\nc.getSousArbreDroit().setRacine(1)\nprint(a)\n```\n\nOn obtient en sortie :\n\n``` python\n>>> (8, (3, (7, (), ()), (5, (), ())), (9, (), (1, (), ())))\n```\n\nCela correspond à l'arbre représenté ci-dessous :\n\n![](arbre_bin3.png){width=\"30%\" fig-align=\"center\"}\n\nOn peut tester les autres méthodes dans la console :\n\n``` python\nprint(c)\n>>> (9, (), (1, (), ()))\nc.getSousArbreGauche().estVide()\n>>> True\nc.estFeuille()\n>>> False\nc.getSousArbreDroit().estFeuille()\n>>> True\n```\n\nNous pouvons maintenant ajouter au fichier `structures.py` les deux fonctions suivantes (en dehors de la classe `ArbreBinaire` car ce ne sont pas des méthodes) qui retournent respectivement la taille et la hauteur d'un arbre binaire.\n\n``` python\ndef taille(arbre) -> int:\n    \"\"\"Retourne la taille de l'arbre, càd son nombre de noeuds\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + taille(arbre.gauche) + taille(arbre.droit)\n\ndef hauteur(arbre) -> int:\n    \"\"\"Retourne la hauteur de l'arbre\"\"\"\n    if arbre.racine is None:\n        return 0\n    else:\n        return 1 + max(hauteur(arbre.gauche), hauteur(arbre.droit))\n```\n\nPrendre le temps de bien comprendre comment fonctionnent ces deux fonctions ...\n\n``` python\ntaille(a)\n>>> 6\nhauteur(a)\n>>> 3\n```\n\nCe module `structures` sera utilisé en exercices et plus tard dans l'année lorsque nous étudierons les algorithmes sur les arbres.\n\n## 2. Arbres binaires de recherche (ABR)\n\nLes ABR sont des arbres binaires. Nous pouvons donc créer une classe `ABR` fille de la classe `ArbreBinaire` en utilisant la notion d'**héritage** et de **polymorphisme** de la POO (voir les compléments de cours à ce sujet). Nous définissons une méthode spécifique : l'insertion d'une clef. Cette méthode ajoute une clef à un ABR existant en s'assurant que l'arbre obtenu est toujours un ABR (le nouveau nœud est toujours une feuille).\n\n``` python\nclass ABR(ArbreBinaire):\n    \"\"\" Implémentation de la structure d'arbre binaire de recherche \"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n    def setRacine(self, racine):\n        \"\"\"définit la clef de la racine de l'instance\n         et crée les sous arbres vides gauches et droits\n         Provoque une erreur si la racine casse la structure d'ABR\"\"\"\n        self.racine = racine\n        if self.gauche is None:\n            self.gauche = ABR()\n        if self.droit is None:\n            self.droit = ABR()\n        if not estABR(self):\n            raise Exception(\"Cette affectation de clef casse la structure ABR !!!\")\n\n    def insere(self, racine):\n        \"\"\"insère une clef dans l'arbre en préservant la structure ABR\"\"\"\n        if self.racine is None:\n            self.racine = racine\n            self.gauche = ABR()\n            self.droit = ABR()\n        else:\n            if racine < self.racine:\n                self.gauche.insere(racine)\n            else:\n                self.droit.insere(racine)\n```\n\nPour définir un arbre binaire de recherche valide, on utilisera toujours la méthode `insere` car elle permet de s'assurer de toujours conserver un ABR.\n\nPour faciliter la vérification, nous définissons une fonction `estABR` qui peut s'appliquer aussi bien à un arbre binaire quelconque qu'à un ABR et qui retourne `True` si l'arbre est un ABR et `False` sinon.\n\n``` python\ndef estABR(arbre, mini=-float(\"inf\"), maxi=+float(\"inf\")) -> bool:\n    if arbre.getRacine() is None:\n        return True\n    else:\n        return estABR(arbre.getSousArbreGauche(), mini, arbre.getRacine()) and \n               estABR(arbre.getSousArbreDroit(), arbre.getRacine(), maxi) and \n               mini < arbre.racine < maxi\n```\n\nPrendre le temps de bien comprendre cette fonction ...\n\nUtilisation :\n\n``` python\nfrom structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\nprint(a)\nprint(estABR(a))\n# Affectation directe à proscrire :\n# a.getSousArbreDroit().setRacine(1) ## provoque une erreur\n```\n\nSortie :\n\n``` python\n(8, (5, (3, (), ()), ()), (12, (10, (), ()), (15, (), ())))\nTrue\n```\n\nL'arbre correspond à :\n\n![](arbre.gv.png){width=\"30%\" fig-align=\"center\"}\n\nLe module `structure.py` est à conserver : il sera utilisé en exercices et dans les chapitres suivants.\n\n::: callout-note\n## Complément\n\nOn peut ajouter une fonctionnalité de représentation graphique d'un arbre en utilisant les bibliothèques `networkx` et `matplotlib`. Ajouter la fonction ci-dessous au fichier `structures.py` :\n\n``` python\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\ndef afficheArbre(arbre, size=(4,4), null_node=False):\n\"\"\"\nsize : tuple de 2 entiers. Si size est int -> (size, size)\nnull_node : si True, trace les liaisons vers les sous-arbres vides\n\"\"\"\narbreAsTuple = eval(arbre.__str__())\ndef parkour(arbre, noeuds, branches, labels, positions, profondeur, \n            pos_courante, pos_parent, null_node):\n    if arbre != ():\n        noeuds[0].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        profondeur -= 1\n        labels[pos_courante] = str(arbre[0])\n        branches[0].append((pos_courante, pos_parent))\n        pos_gauche = pos_courante - 2 ** profondeur\n        parkour(arbre[1], noeuds, branches, labels, positions, profondeur, \n                pos_gauche, pos_courante, null_node)\n        pos_droit = pos_courante + 2 ** profondeur\n        parkour(arbre[2], noeuds, branches, labels, positions, profondeur, \n                pos_droit, pos_courante, null_node)\n    elif null_node:\n        noeuds[1].append(pos_courante)\n        positions[pos_courante] = (pos_courante, profondeur)\n        branches[1].append((pos_courante, pos_parent))\n\nif arbreAsTuple == ():\n    return\n\nbranches = [[]]\nprofondeur = hauteur(arbre)\npos_courante = 2 ** profondeur\nnoeuds = [[pos_courante]]\npositions = {pos_courante: (pos_courante, profondeur)}\nlabels = {pos_courante: str(arbreAsTuple[0])}\n\nif null_node:\n    branches.append([])\n    noeuds.append([])\n\nprofondeur -= 1\nparkour(arbreAsTuple[1], noeuds, branches, labels, positions, profondeur, \n        pos_courante - 2 ** profondeur, pos_courante, null_node)\nparkour(arbreAsTuple[2], noeuds, branches, labels, positions, profondeur, \n        pos_courante + 2 ** profondeur, pos_courante, null_node)\n\nmon_arbre = nx.Graph()\n\nif type(size) == int:\n    size = (size, size)\nplt.figure(figsize=size)\n\nnx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[0], \n                       node_color=\"white\", node_size=550, edgecolors=\"blue\")\nnx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[0], \n                       edge_color=\"black\", width=2)\nnx.draw_networkx_labels(mon_arbre, positions, labels)\n\nif null_node:\n    nx.draw_networkx_nodes(mon_arbre, positions, nodelist=noeuds[1], \n                           node_color=\"white\", node_size=50, edgecolors=\"grey\")\n    nx.draw_networkx_edges(mon_arbre, positions, edgelist=branches[1], \n                           edge_color=\"grey\", width=1)\n\nax = plt.gca()\nax.margins(0.1)\nplt.axis(\"off\")\nplt.show()\nplt.close()\n```\n\nUtilisation :\n\n``` python\nfrom structures import *\n\na = ABR()\na.setRacine(8)\na.insere(5)\na.insere(3)\na.insere(12)\na.insere(10)\na.insere(15)\n\nafficheArbre(a)\n```\n\nSortie :\n\n![](arbre.gv.png){width=\"30%\" fig-align=\"center\"}\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":[true,"pdf","tex"]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"filters":["lightbox"],"output-file":"implementationArbres.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.4.11","bibliography":["../references.bib"],"theme":{"light":["flatly","../theme_light.scss"],"dark":["darkly","../theme_dark.scss"]},"grid":{"sidebar-width":"250px","body-width":"1000px","margin-width":"300px"},"lightbox":"auto","code-block-border-left":"#31BAE9","code-block-bg":true,"title":"Implémentation des arbres en Python","subtitle":"S4 - Arbres et graphes","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"format-links":["pdf","tex"]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"reference-location":"document","output-file":"implementationArbres.pdf"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"block-headings":true,"bibliography":["../references.bib"],"title":"Implémentation des arbres en Python","subtitle":"S4 - Arbres et graphes","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"biblio-title":"Sources utilisées"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html"]}