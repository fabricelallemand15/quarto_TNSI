{"title":"Programmation orientée objets (Exercices)","markdown":{"yaml":{"title":"Programmation orientée objets (Exercices)","subtitle":"S1 - Langages et programmation","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"format":{"html":"default","pdf":{"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"biblio-title":"Sources utilisées","reference-location":"document","fig-pos":"h","keep-tex":true}},"format-links":["pdf","tex"]},"headingText":"{{< fa desktop >}} Exercice 1","containsRefs":false,"markdown":"\n\n_Les exercices précédés du symbole {{< fa desktop >}} sont à faire sur machine, en sauvegardant le fichier si nécessaire._\n\n_Les exercices précédés du symbole {{< fa solid pencil-alt >}} doivent être résolus par écrit._\n\n\nOn considère la classe suivante :\n\n````python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def deplace(self, dx, dy):\n        self.x = self.x + dx\n        self.y = self.y + dy\n\n    def symetrique(self):\n        return Point(-self.x, -self.y)\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n````\n\n1. Quelle instruction entrer dans la console pour créer le point a d’abscisse 2 et d’ordonnée 4 ?\n2. Quels sont les attributs et les méthodes de cette classe ? Dresser le diagramme de classe de cette classe.\n3. La méthode spéciale `__repr__` permet de définir comment l'objet sera affiché dans la console Python.\n\n    Qu’affichent les instructions suivantes dont la sortie a été effacée ?\n\n    ````python\n    >>> b = Point(1, 2)\n    >>> b\n    ...\n    >>> b.deplace(3, 5)\n    >>> b\n    ...\n    ````\n4. Définir une méthode ``abscisse`` qui renvoie l’abscisse du point.\n5. Recommencer avec la méthode ``ordonnee``.\n\n\n## {{< fa desktop >}} Exercice 2\n\nSoit la classe ``Date`` définie par le diagramme de classe (@fig-classe).\n\n![Diagramme de classe de la classe Date](classe_mermaid_exo.png){#fig-classe width=100px}\n\n1. Implémenter cette classe en Python.\n2. Créer deux dates le 20 janvier 2012 et le 14 février 2022.\n3. Dans la méthode d'initialisation d'instance de la classe, prévoir un dispositif pour éviter les dates impossibles (du genre 32/14/2020). Dans ce cas, la création doit provoquer une erreur, chose possible grâce à l’instruction ``raise`` (documentation à rechercher !).\n4. Ajouter une méthode ``__repr__`` et une méthode `__str__`permettant d’afficher la date sous la forme “25 janvier 1989”. Les noms des mois seront définis en tant qu’attribut de classe à l’aide d’une liste.\n5. Ajouter une méthode ``__lt__`` qui permet de comparer deux dates. L’expression ``d1 < d2`` (``d1`` et ``d2`` étant deux objets de type ``Date``) doit grâce à cette méthode renvoyer ``True`` ou ``False`` .\n\n\n## {{< fa solid pencil-alt >}} Exercice 3 (Bac 2022, extrait)\n\nSimon souhaite créer en Python le jeu de cartes « la bataille » pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu. On rappelle ici les règles du jeu de la bataille : \n\n_Préparation_ :\n\n* Distribuer toutes les cartes aux deux joueurs.\n* Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cachée devant eux.\n\n_Déroulement_ :\n\n* À chaque tour, chaque joueur dévoile la carte du haut de son tas.\n* Le joueur qui présente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.\n* Les valeurs des cartes sont : dans l'ordre de la plus forte à la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible).\n\n_Si deux cartes sont de même valeur, il y a \"bataille\"._\n\n* Chaque joueur pose alors une carte face cachée, suivie d'une carte face visible sur la carte dévoilée précédemment.\n* On recommence l'opération s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.\n\nLorsque l'un des joueurs possède toutes les cartes du jeu, la partie s'arrête et ce dernier gagne. \n\nPour cela Simon crée une classe Python ``Carte``. Chaque instance de la classe a deux attributs : un pour sa valeur et un pour sa couleur. Il donne au valet la valeur 11, à la dame la valeur 12, au roi la valeur 13 et à l'as la valeur 14. La couleur est une chaîne de caractères: \"trefle\", \"carreau\", \"coeur\" ou \"pique\". \n\nSimon a écrit la classe Python ``Carte`` suivante, ayant deux attributs ``valeur`` et ``couleur``, et dont le constructeur prend deux arguments: ``val`` et ``coul``.\n\n1. Recopier et compléter les pointillés des lignes ci-dessous.\n\n    ````py\n    class Carte:\n        def __init__(self, val, coul):\n            ... .valeur = ...\n            ... . ... = coul\n    ````\n\n2. Parmi les propositions ci-dessous quelle instruction permet de créer l'objet « 7 de cœur » sous le nom c7 ?\n\n    * ``c7. init (self, 7, \"coeur\")``\n    * ``c7 = Carte(self, 7, \"coeur\")``\n    * ``c7 = Carte ( 7, \"coeur\")``\n    * ``from Carte import 7, \"coeur\"``\n\n3. On souhaite créer le jeu de cartes. Pour cela, on écrit une fonction ``initialiser()`` :\n    \n    * sans paramètre\n    * qui renvoie une liste de 52 objets de la classe ``Carte`` représentant les 52 cartes du jeu.\n\n    Voici une proposition de code. Recopier et compléter les lignes suivantes pour que la fonction réponde à la demande :\n\n    ````py\n    def initialiser() :\n        jeu = [] \n        for c in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n            for v in range( ... ) :\n                carte_cree = ...\n                jeu.append(carte_cree)\n        return jeu\n    ````\n\n4. Écrire une fonction ``comparer(cartel, carte2)`` qui prend en paramètres deux objets de la classe ``Carte``. Cette fonction renvoie :\n\n    * 0 si la force des deux cartes est identique,\n    * 1 si la carte cartel est strictement plus forte que carte2\n    * -1 si la carte carte2 est strictement plus forte que cartel\n\n[Voir le corrigé](https://flallemand.fr/notebook/?from=https://flallemand.fr/nsi/assets/notebooks/exo3_POO_CORR.ipynb){target=_blank .md-button .md-button--primary}\n\n\n## {{< fa solid pencil-alt >}} Exercice 4 (Bac 2022)\n\nUn fabricant de brioches décide d’informatiser sa gestion des stocks. Il écrit pour cela un programme en langage Python. Une partie de son travail consiste à développer une classe Stock dont la première version est la suivante :\n\n````py\nclass Stock:\n    def __init__(self):\n        self.qt_farine = 0 # quantité de farine initialisée à 0 g\n        self.nb_oeufs = 0 # nombre d’œufs (0 à l’initialisation)\n        self.qt_beurre = 0 # quantité de beurre initialisée à 0 g\n````\n\n1. Écrire une méthode ``ajouter_beurre(self, qt)`` qui ajoute la quantité ``qt`` de beurre à un objet de la classe ``Stock``.\n    \n    On admet que l’on a écrit deux autres méthodes ``ajouter_farine`` et ``ajouter_oeufs`` qui ont des fonctionnements analogues.\n\n2. Écrire une méthode ``afficher(self)`` qui affiche la quantité de farine, d’œufs et de beurre d’un objet de type ``Stock``. L’exemple ci-dessous illustre l’exécution de cette méthode dans la console :\n\n    ````python\n    >>> mon_stock = Stock() \n    >>> mon_stock.afficher() \n    farine: 0 \n    oeuf: 0 \n    beurre: 0 \n    >>> mon_stock.ajouter_beurre(560) \n    >>> mon_stock.afficher() \n    farine: 0 \n    oeuf: 0 \n    beurre: 560 \n    ````\n\n3.\tPour faire une brioche, il faut 350 g de farine, 175 g de beurre et 4 oeufs. Écrire une méthode ``stock_suffisant_brioche(self)`` qui renvoie un booléen : VRAI s'il y a assez d'ingrédients dans le stock pour faire une brioche et FAUX sinon.\n\n4.\tOn considère la méthode supplémentaire ``produire(self)`` de la classe ``Stock`` donnée par le code suivant :\n\n    ````py\n    def produire(self):\n        res = 0 \n        while self.stock_suffisant_brioche():\n            self.qt_beurre = self.qt_beurre - 175 \n            self.qt_farine = self.qt_farine - 350 \n            self.nb_oeufs = self.nb_oeufs - 4 \n            res = res + 1\n        return res\n    ````\n\n    On considère un stock défini par les instructions suivantes :\n\n    ````python\n    >>> mon_stock=Stock()\n    >>> mon_stock.ajouter_beurre(1000) \n    >>> mon_stock.ajouter_farine(1000) \n    >>> mon_stock.ajouter_oeufs(10)\n    ````\n\n    1. On exécute ensuite l’instruction : ``>>> mon_stock.produire()``. Quelle valeur s’affiche dans la console ? Que représente cette valeur ?\n    2. On exécute ensuite l’instruction : ``>>> mon_stock.afficher()``. Que s’affiche-t-il dans la console ?\n    \n5. L’industriel possède n lieux de production distincts et donc n stocks distincts.\n\n    On suppose que ces stocks sont dans une liste dont chaque élément est un objet de type ``Stock``. Écrire une fonction Python ``nb_brioches(liste_stocks)`` possédant pour unique paramètre la liste des stocks et qui renvoie le nombre total de brioches produites.\n\n[Voir le corrigé](https://flallemand.fr/notebook/?from=https://flallemand.fr/nsi/assets/notebooks/exo4_POO_CORR.ipynb){target=_blank .md-button .md-button--primary}\n\n","srcMarkdownNoYaml":"\n\n_Les exercices précédés du symbole {{< fa desktop >}} sont à faire sur machine, en sauvegardant le fichier si nécessaire._\n\n_Les exercices précédés du symbole {{< fa solid pencil-alt >}} doivent être résolus par écrit._\n\n## {{< fa desktop >}} Exercice 1\n\nOn considère la classe suivante :\n\n````python\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def deplace(self, dx, dy):\n        self.x = self.x + dx\n        self.y = self.y + dy\n\n    def symetrique(self):\n        return Point(-self.x, -self.y)\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n````\n\n1. Quelle instruction entrer dans la console pour créer le point a d’abscisse 2 et d’ordonnée 4 ?\n2. Quels sont les attributs et les méthodes de cette classe ? Dresser le diagramme de classe de cette classe.\n3. La méthode spéciale `__repr__` permet de définir comment l'objet sera affiché dans la console Python.\n\n    Qu’affichent les instructions suivantes dont la sortie a été effacée ?\n\n    ````python\n    >>> b = Point(1, 2)\n    >>> b\n    ...\n    >>> b.deplace(3, 5)\n    >>> b\n    ...\n    ````\n4. Définir une méthode ``abscisse`` qui renvoie l’abscisse du point.\n5. Recommencer avec la méthode ``ordonnee``.\n\n\n## {{< fa desktop >}} Exercice 2\n\nSoit la classe ``Date`` définie par le diagramme de classe (@fig-classe).\n\n![Diagramme de classe de la classe Date](classe_mermaid_exo.png){#fig-classe width=100px}\n\n1. Implémenter cette classe en Python.\n2. Créer deux dates le 20 janvier 2012 et le 14 février 2022.\n3. Dans la méthode d'initialisation d'instance de la classe, prévoir un dispositif pour éviter les dates impossibles (du genre 32/14/2020). Dans ce cas, la création doit provoquer une erreur, chose possible grâce à l’instruction ``raise`` (documentation à rechercher !).\n4. Ajouter une méthode ``__repr__`` et une méthode `__str__`permettant d’afficher la date sous la forme “25 janvier 1989”. Les noms des mois seront définis en tant qu’attribut de classe à l’aide d’une liste.\n5. Ajouter une méthode ``__lt__`` qui permet de comparer deux dates. L’expression ``d1 < d2`` (``d1`` et ``d2`` étant deux objets de type ``Date``) doit grâce à cette méthode renvoyer ``True`` ou ``False`` .\n\n\n## {{< fa solid pencil-alt >}} Exercice 3 (Bac 2022, extrait)\n\nSimon souhaite créer en Python le jeu de cartes « la bataille » pour deux joueurs. Les questions qui suivent demandent de reprogrammer quelques fonctions du jeu. On rappelle ici les règles du jeu de la bataille : \n\n_Préparation_ :\n\n* Distribuer toutes les cartes aux deux joueurs.\n* Les joueurs ne prennent pas connaissance de leurs cartes et les laissent en tas face cachée devant eux.\n\n_Déroulement_ :\n\n* À chaque tour, chaque joueur dévoile la carte du haut de son tas.\n* Le joueur qui présente la carte ayant la plus haute valeur emporte les deux cartes qu'il place sous son tas.\n* Les valeurs des cartes sont : dans l'ordre de la plus forte à la plus faible : As, Roi, Dame, Valet, 10, 9, 8, 7, 6, 5, 4, 3 et 2 (la plus faible).\n\n_Si deux cartes sont de même valeur, il y a \"bataille\"._\n\n* Chaque joueur pose alors une carte face cachée, suivie d'une carte face visible sur la carte dévoilée précédemment.\n* On recommence l'opération s'il y a de nouveau une bataille sinon, le joueur ayant la valeur la plus forte emporte tout le tas.\n\nLorsque l'un des joueurs possède toutes les cartes du jeu, la partie s'arrête et ce dernier gagne. \n\nPour cela Simon crée une classe Python ``Carte``. Chaque instance de la classe a deux attributs : un pour sa valeur et un pour sa couleur. Il donne au valet la valeur 11, à la dame la valeur 12, au roi la valeur 13 et à l'as la valeur 14. La couleur est une chaîne de caractères: \"trefle\", \"carreau\", \"coeur\" ou \"pique\". \n\nSimon a écrit la classe Python ``Carte`` suivante, ayant deux attributs ``valeur`` et ``couleur``, et dont le constructeur prend deux arguments: ``val`` et ``coul``.\n\n1. Recopier et compléter les pointillés des lignes ci-dessous.\n\n    ````py\n    class Carte:\n        def __init__(self, val, coul):\n            ... .valeur = ...\n            ... . ... = coul\n    ````\n\n2. Parmi les propositions ci-dessous quelle instruction permet de créer l'objet « 7 de cœur » sous le nom c7 ?\n\n    * ``c7. init (self, 7, \"coeur\")``\n    * ``c7 = Carte(self, 7, \"coeur\")``\n    * ``c7 = Carte ( 7, \"coeur\")``\n    * ``from Carte import 7, \"coeur\"``\n\n3. On souhaite créer le jeu de cartes. Pour cela, on écrit une fonction ``initialiser()`` :\n    \n    * sans paramètre\n    * qui renvoie une liste de 52 objets de la classe ``Carte`` représentant les 52 cartes du jeu.\n\n    Voici une proposition de code. Recopier et compléter les lignes suivantes pour que la fonction réponde à la demande :\n\n    ````py\n    def initialiser() :\n        jeu = [] \n        for c in [\"coeur\", \"carreau\", \"trefle\", \"pique\"]:\n            for v in range( ... ) :\n                carte_cree = ...\n                jeu.append(carte_cree)\n        return jeu\n    ````\n\n4. Écrire une fonction ``comparer(cartel, carte2)`` qui prend en paramètres deux objets de la classe ``Carte``. Cette fonction renvoie :\n\n    * 0 si la force des deux cartes est identique,\n    * 1 si la carte cartel est strictement plus forte que carte2\n    * -1 si la carte carte2 est strictement plus forte que cartel\n\n[Voir le corrigé](https://flallemand.fr/notebook/?from=https://flallemand.fr/nsi/assets/notebooks/exo3_POO_CORR.ipynb){target=_blank .md-button .md-button--primary}\n\n\n## {{< fa solid pencil-alt >}} Exercice 4 (Bac 2022)\n\nUn fabricant de brioches décide d’informatiser sa gestion des stocks. Il écrit pour cela un programme en langage Python. Une partie de son travail consiste à développer une classe Stock dont la première version est la suivante :\n\n````py\nclass Stock:\n    def __init__(self):\n        self.qt_farine = 0 # quantité de farine initialisée à 0 g\n        self.nb_oeufs = 0 # nombre d’œufs (0 à l’initialisation)\n        self.qt_beurre = 0 # quantité de beurre initialisée à 0 g\n````\n\n1. Écrire une méthode ``ajouter_beurre(self, qt)`` qui ajoute la quantité ``qt`` de beurre à un objet de la classe ``Stock``.\n    \n    On admet que l’on a écrit deux autres méthodes ``ajouter_farine`` et ``ajouter_oeufs`` qui ont des fonctionnements analogues.\n\n2. Écrire une méthode ``afficher(self)`` qui affiche la quantité de farine, d’œufs et de beurre d’un objet de type ``Stock``. L’exemple ci-dessous illustre l’exécution de cette méthode dans la console :\n\n    ````python\n    >>> mon_stock = Stock() \n    >>> mon_stock.afficher() \n    farine: 0 \n    oeuf: 0 \n    beurre: 0 \n    >>> mon_stock.ajouter_beurre(560) \n    >>> mon_stock.afficher() \n    farine: 0 \n    oeuf: 0 \n    beurre: 560 \n    ````\n\n3.\tPour faire une brioche, il faut 350 g de farine, 175 g de beurre et 4 oeufs. Écrire une méthode ``stock_suffisant_brioche(self)`` qui renvoie un booléen : VRAI s'il y a assez d'ingrédients dans le stock pour faire une brioche et FAUX sinon.\n\n4.\tOn considère la méthode supplémentaire ``produire(self)`` de la classe ``Stock`` donnée par le code suivant :\n\n    ````py\n    def produire(self):\n        res = 0 \n        while self.stock_suffisant_brioche():\n            self.qt_beurre = self.qt_beurre - 175 \n            self.qt_farine = self.qt_farine - 350 \n            self.nb_oeufs = self.nb_oeufs - 4 \n            res = res + 1\n        return res\n    ````\n\n    On considère un stock défini par les instructions suivantes :\n\n    ````python\n    >>> mon_stock=Stock()\n    >>> mon_stock.ajouter_beurre(1000) \n    >>> mon_stock.ajouter_farine(1000) \n    >>> mon_stock.ajouter_oeufs(10)\n    ````\n\n    1. On exécute ensuite l’instruction : ``>>> mon_stock.produire()``. Quelle valeur s’affiche dans la console ? Que représente cette valeur ?\n    2. On exécute ensuite l’instruction : ``>>> mon_stock.afficher()``. Que s’affiche-t-il dans la console ?\n    \n5. L’industriel possède n lieux de production distincts et donc n stocks distincts.\n\n    On suppose que ces stocks sont dans une liste dont chaque élément est un objet de type ``Stock``. Écrire une fonction Python ``nb_brioches(liste_stocks)`` possédant pour unique paramètre la liste des stocks et qui renvoie le nombre total de brioches produites.\n\n[Voir le corrigé](https://flallemand.fr/notebook/?from=https://flallemand.fr/nsi/assets/notebooks/exo4_POO_CORR.ipynb){target=_blank .md-button .md-button--primary}\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":["pdf","tex"]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"filters":["lightbox"],"output-file":"POO_exercices.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.4.84","bibliography":["../references.bib"],"theme":{"light":["flatly","../theme_light.scss"],"dark":["darkly","../theme_dark.scss"]},"grid":{"sidebar-width":"250px","body-width":"1000px","margin-width":"300px"},"lightbox":"auto","code-block-border-left":"#31BAE9","code-block-bg":true,"title":"Programmation orientée objets (Exercices)","subtitle":"S1 - Langages et programmation","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":"h","fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"format-links":["pdf","tex"]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"reference-location":"document","output-file":"POO_exercices.pdf"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteur·rice·s","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Faire part d'un problème","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant"},"metadata":{"block-headings":true,"bibliography":["../references.bib"],"title":"Programmation orientée objets (Exercices)","subtitle":"S1 - Langages et programmation","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"biblio-title":"Sources utilisées"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html"]}