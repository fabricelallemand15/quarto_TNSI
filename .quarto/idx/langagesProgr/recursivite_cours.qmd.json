{"title":"Récursivité (Cours)","markdown":{"yaml":{"title":"Récursivité (Cours)","subtitle":"S1 - Langages et programmation","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"format":{"html":"default","pdf":{"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"biblio-title":"Sources utilisées","reference-location":"document","keep-tex":true}},"format-links":["pdf","tex"]},"headingText":"1. Motivation et introduction du concept","containsRefs":false,"markdown":"\n\n\nUn algorithme est dit récursif s'il **s'appelle lui-même** directement ou\nindirectement via l'appel d'une ou de plusieurs autres fonctions qui\nelles-mêmes finissent par l'appeler.\n\nLa récursivité est un concept fondamental en informatique qui met\nnaturellement en pratique un mode de pensée puissant qui consiste à\npouvoir découper la tâche à réaliser en sous-tâches de mêmes natures mais\nplus petites qui finalement sont simples à résoudre.\n\nPrenons par exemple le calcul de la factorielle d'un nombre entier $n$.  Par\ndéfinition pour un $n$ entier strictement positif, $n!$ est égale au\nproduit des entiers strictement positifs inférieurs à $n$.  Par\nconvention on a aussi $0! = 1$.\n\nPar exemple, on a : $5!=1\\times 2\\times 3\\times 4\\times 5 = 120$.\n\nDonnons le code itératif d'une fonction calculant la factorielle:\n\n```python\n  def fact(n):\n    \"\"\"Renvoie la factorielle de n.\"\"\"\n    res = 1\n    for i in range(1,n+1):\n      res = res * i  \n    return res\n```\n\nLa définition récursive se base sur le fait que $n! = n\\times (n-1)!$ pour\ntout $n>0$.\n\nOn obtient le code:\n\n```python\n  def fact(n):\n    \"\"\"Renvoie la factorielle de n (méthode récursive).\"\"\"\n    if n == 0:\n      res = 1\n    else:\n      res = n*fact(n-1)\n    return res\n```\n\nPour commencer à comprendre comment fonctionne cette fonction récursive, nous pouvons visualiser le calcul de `fact(4)` grâce à l'outil Python Tutor ci-dessous.\n\n<iframe width=\"800\" height=\"500\" frameborder=\"0\" src=\"https://pythontutor.com/iframe-embed.html#code=def%20fact%28n%29%3A%0A%20%20%20%20%22%22%22Renvoie%20la%20factorielle%20de%20n%20%28m%C3%A9thode%20r%C3%A9cursive%29.%22%22%22%0A%20%20%20%20if%20n%20%3D%3D%200%3A%0A%20%20%20%20%20%20res%20%3D%201%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20res%20%3D%20n*fact%28n-1%29%0A%20%20%20%20return%20res%0A%0A%0Aprint%28fact%284%29%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false\"> </iframe>\n\n## 2. Mécanisme\n\nConsidérons la fonction `foo` ci-dessous :\n\n```python\ndef foo(n):\n    if n == 0:\n        print(\"Cas de base : \", n)\n    else:\n        print(\"Début avec n = \" , n)\n        foo(n-1)\n        print(\"Fin avec n = \" , n)\n\n\nfoo(3)\n```\n\nCe programme génère la sortie suivante : \n\n````pycon\nDébut avec n =  3\nDébut avec n =  2\nDébut avec n =  1\nCas de base :  0\nFin avec n =  1\nFin avec n =  2\nFin avec n =  3\n````\n\nL'observation de ces résultats permet de comprendre que le système, lors de l'exécution de ce programme, utilise une **pile d'exécution**. Une pile d'exécution permet d'enregistrer des informations sur les fonctions en cours d'exécution dans un programme. On parle de pile, car les exécutions successives \"s'empilent\" les unes sur les autres, comme une pile d'assiettes, ou de crêpes. Si nous nous intéressons à la pile d'exécution du programme étudié ci-dessus, nous obtenons le schéma suivant :\n\n![Pile d'exécution](pile_recursive.png)\n\nIl est important de bien comprendre que la fonction située au sommet de la pile d'exécution est en cours d'exécution. Toutes les fonctions situées \"en dessous\" sont mises en pause jusqu'au moment où elles se retrouveront au sommet de la pile. Quand une fonction termine son exécution, elle est automatiquement retirée du sommet de la pile (on dit que la fonction est dépilée).\n\nLa pile d'exécution permet de retenir la prochaine instruction à exécuter au moment où une fonction sera sortie de son \"état de pause\" (qu'elle se retrouvera au sommet de la pile d'exécution). Elle enregistre aussi **le contexte**, c'est-à-dire par exemple ici la valeur de la variable locale $n$ associée à chaque appel de la fonction.\n\nNous pouvons comprendre que ce sont plusieurs copies (on dira plutôt des **instances**) de la fonction `foo` qui sont présentent dans la pile, chacune ayant son propre **espace de noms** : la variable $n$ de la fonction située en haut de la pile n'est pas la même que la variable $n$ de la fonction située en-dessous.\n\n::: {.callout-warning}\n## Limitation propre à Python\nLe langage Python limite à 1000 le nombre d'appels récursifs d'une fonction, autrement dit la hauteur de la pile.\n\n```python\nRecursionError: maximum recursion depth exceeded while calling a Python object\n```\n:::\n\n## 3. Écrire un algorithme récursif\n\nLors de l'écriture d'un algorithme récursif, trois règles doivent toujours être vérifiées :\n\n::: {.callout-important}\n## Les trois règles de récursivité\n1. La fonction s'appelle elle-même !\n2. La fonction comporte un \"cas de base\" qui correspond à une condition d'arrêt.\n3. L'algorithme conduit vers le cas de base : il n'y a pas une infinité d'appels récursifs.\n:::\n\nLa troisième règle est assurée par la **preuve de terminaison** qui se fait souvent en identifiant la construction d’une suite strictement décroissante d’entiers positifs ou nuls.\n\n## 4. Fonction récursive et fonction itérative\n\nLa programmation récursive n'est ni meilleure, ni pire que, la programmation itérative. Toute fonction récursive peut aussi être programmée de façon itérative. Cependant, en cas de nombreux appels récursifs, la mémoire de la machine sera trop fortement sollicitée et l'exécution ralentie, voire impossible.\n\nLe choix entre une solution récursive ou une solution itérative est donc guidé par le type de problème à résoudre car certains problèmes s'écrivent *naturellement* de façon récursive.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":[true,"pdf","tex"]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"filters":["lightbox"],"output-file":"recursivite_cours.html"},"language":{},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.3.208","bibliography":["../references.bib"],"theme":{"light":["flatly","../theme_light.scss"],"dark":["darkly","../theme_dark.scss"]},"grid":{"sidebar-width":"250px","body-width":"1000px","margin-width":"300px"},"lightbox":"auto","code-block-border-left":"#31BAE9","code-block-bg":true,"title":"Récursivité (Cours)","subtitle":"S1 - Langages et programmation","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":true,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"format-links":["pdf","tex"]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":[{"text":"\\usepackage{fancyhdr} \\pagestyle{fancy} \\usepackage{lastpage}"}],"include-before-body":[{"text":"\\lhead{Spécialité NSI} \\rhead{Terminale} \\chead{} \\cfoot{} \\lfoot{Lycée \\'Emile Duclaux} \\rfoot{Page \\thepage/\\pageref{LastPage}} \\renewcommand{\\headrulewidth}{0pt} \\renewcommand{\\footrulewidth}{0pt} \\thispagestyle{fancy} \\vspace{-2cm}"}],"reference-location":"document","output-file":"recursivite_cours.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["../references.bib"],"papersize":"a4","title":"Récursivité (Cours)","subtitle":"S1 - Langages et programmation","lang":"fr","tbl-cap-location":"bottom","crossref":{"eq-prefix":"Éq.","tbl-prefix":"Tableau","tbl-title":"Tableau"},"geometry":["top=20mm","bottom=20mm","left=20mm","right=20mm","heightrounded"],"biblio-title":"Sources utilisées"},"extensions":{"book":{"selfContainedOutput":true}}}}}